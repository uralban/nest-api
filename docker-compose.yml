services:
  app:
    container_name: meduzzen-back-app-dev
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./src:/app/src
    ports:
      - '${PORT}:${PORT}'
    restart: always
    env_file:
      - .env
    depends_on:
      test:
        condition: service_completed_successfully
      test-e2e:
        condition: service_completed_successfully
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres-db:
    image: postgres:17.2-alpine3.21
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - '${DB_PORT}:5432'
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  postgres-db-test:
    image: postgres:17.2-alpine3.21
    container_name: postgres-db-test
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME_TEST}
    ports:
      - '5433:5432'
    volumes:
      - db_data_test:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME_TEST}'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  redis:
    container_name: redis
    build:
      context: .
      dockerfile: Dockerfile
      target: redis
    ports:
      - "${REDIS_PORT}:6379"
    restart: always
    environment:
      REDIS_PASS: ${REDIS_PASS}
      REDIS_USER: ${REDIS_USER}
    volumes:
      - redis-data:/data
      - ./redis.conf.template:/usr/local/etc/redis/redis.conf.template
    command: >
      sh -c "envsubst < /usr/local/etc/redis/redis.conf.template > /usr/local/etc/redis/redis.conf &&
             redis-server /usr/local/etc/redis/redis.conf"
    healthcheck:
      test: [ "CMD", "redis-cli", "-u", "redis://${REDIS_USER}:${REDIS_PASS}@localhost:${REDIS_PORT}", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3

  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    env_file:
      - .env
    command: npm run test
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  test-cov:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./coverage:/app/coverage
    env_file:
      - .env
    command: npm run test:cov
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  test-e2e:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    env_file:
      - .env
    command: npm run test:e2e
    depends_on:
      postgres-db-test:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  db_data:
  db_data_test:
  redis-data: